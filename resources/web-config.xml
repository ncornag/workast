<?xml version="1.0" encoding="UTF-8"?>
<!--
    - DispatcherServlet application context for Workast's web tier.
-->
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:p="http://www.springframework.org/schema/p" 
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:oxm="http://www.springframework.org/schema/oxm"
       xmlns:util="http://www.springframework.org/schema/util"
        xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
                http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
                http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm-3.0.xsd
                http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.0.xsd"
    default-autowire="byName">

    <!--
        The controllers are autodetected POJOs labeled with the @Controller annotation.
        DefaultAnnotationHandlerMapping is driven by these annotations and is 
        enabled by default with Java 5+:
    -->
    <context:component-scan base-package="es.workast" scoped-proxy="targetClass" />

    <!-- 
        Locale resolver
     -->
    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
        <property name="cookieName" value="locale"/>
        <property name="defaultLocale" value="en"/>
    </bean>

    <bean id="localeChangeInterceptor" class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"/>
    
    <!-- Controllers -->
    
    <!-- Multipart COntroller -->    
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="${fileManager.attachments.maxUploadSize}"/>
    </bean>
    
    <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" p:order="10">
        <property name="interceptors">
            <list>
                <ref bean="localeChangeInterceptor"/>
            </list>
        </property>
    </bean>

    <!-- 
        - Enables convention-based request URL mapping to @Controllers 
        - e.g. /hotels/* maps to HotelsController 
    <bean id="dataControllerHandler" class="org.springframework.web.servlet.mvc.support.ControllerClassNameHandlerMapping" p:order="10">
        <property name="interceptors">
            <list>
                <ref bean="localeChangeInterceptor"/>
            </list>
        </property>
        <property name="pathPrefix" value="data"/>
    </bean>
    -->
    
    <!-- 
        - Maps request URLs to views (defaultHandler Selects view names to render based 
        - on the request URI: e.g. /index selects "index") 
    -->
    <bean id="urlHandler" class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping" p:order="30">
        <property name="interceptors">
            <list>
                <ref bean="localeChangeInterceptor"/>
            </list>
        </property>
        <property name="defaultHandler">
            <bean class="org.springframework.web.servlet.mvc.UrlFilenameViewController"/>
        </property>
    </bean>
    
    <!-- VIEWS -->
    
    <!--
        - This view resolver delegates to the InternalResourceViewResolver and BeanNameViewResolver,
        - and uses the requested media type to pick a matching view. When the media type is 'text/html',
        - it will delegate to the InternalResourceViewResolver's JstlView, otherwise to the
        - BeanNameViewResolver. Note the use of the expression language to refer to the contentType
        - property of the vets view bean, setting it to 'application/vnd.springsource.samples.petclinic+xml'.
    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <property name="mediaTypes">
            <map>
                <entry key="xml" value="#{vets.contentType}"/>
                <entry key="atom" value="#{visits.contentType}"/>
                <entry key="jsonView" value="#{jsonView.contentType}"/>
            </map>
        </property>
        <property name="order" value="0"/>
    </bean>
    -->
    
    <!--
        - The BeanNameViewResolver is used to pick up the visits view name (below).
     -->
    <bean class="org.springframework.web.servlet.view.BeanNameViewResolver" p:order="10"/>
    
    <!-- Tiles resolver -->
    <bean id="tilesViewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver" p:order="30" >
        <property name="viewClass" value="org.springframework.web.servlet.view.tiles2.TilesView"/>
        <property name="viewNames">
            <list>
                <value>login</value>
                <value>signup</value>
                <value>forgotPassword</value>
                <value>recoverLostPassword</value>
                <value>stream/*</value>
                <value>profile/*</value>
                <value>tag/*</value>
                <value>group/*</value>
            </list>
        </property>
    </bean>   
    
    <!-- JSP resolver -->
    <bean id="jspViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver" p:order="40" 
        p:prefix="/WEB-INF/jsp/" p:suffix=".jsp"/>
    
    <!--
        - The AtomView rendering a Atom feed of the visits
    <bean id="visits" class="org.springframework.samples.petclinic.web.VisitsAtomView"/>

    <bean id="vets" class="org.springframework.web.servlet.view.xml.MarshallingView">
        <property name="contentType" value="application/vnd.springsource.samples.petclinic+xml"/>
        <property name="marshaller" ref="marshaller"/>
    </bean>

    <oxm:jaxb2-marshaller id="marshaller">
        <oxm:class-to-be-bound name="org.springframework.samples.petclinic.Vets"/>
    </oxm:jaxb2-marshaller>
     -->
    
    <!-- Tiles -->
    <bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
        <property name="definitions">
            <list>
                <value>/WEB-INF/classes/tiles-config.xml</value>
            </list>
        </property>
    </bean>
        
    <!--
        Message source for this context, loaded from localized "messages_xx" files.
    -->
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <value>/WEB-INF/classes/properties/default</value>
                <value>/WEB-INF/classes/properties/messages</value>
            </list>
        </property> 
        <property name="cacheSeconds" value="1"/>
    </bean>
    
    
    <!--
        - This bean resolves specific types of exceptions to corresponding logical 
        - view names for error views. The default behaviour of DispatcherServlet 
        - is to propagate all exceptions to the servlet container: this will happen 
        - here with all other types of exceptions.
    -->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <prop key="org.springframework.web.multipart.MaxUploadSizeExceededException">forms/MaxUploadSizeExceededException</prop>
            </props>
        </property>
    </bean>
    
</beans>