<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee"
    xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
    id="WebApp_ID" version="2.5">
    
    <display-name>workast</display-name>
    <description>Servidor de streams sociales :)</description>
    
    <!--
        Key of the system property that should specify the root directory of this
        web app. Applied by WebAppRootListener or Log4jConfigListener.
    -->
    <context-param>
        <param-name>webAppRootKey</param-name>
        <param-value>workast.root</param-value>
    </context-param>

    <!--
        - Location of the XML file that defines the root application context
        - Applied by ContextLoaderListener.
    -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>/WEB-INF/classes/application-config.xml,/WEB-INF/classes/web-config.xml</param-value>
    </context-param>
    <!--
        - Location of the Log4J config file, for initialization and refresh checks.
        - Applied by Log4jConfigListener.
    -->
    <context-param>
        <param-name>log4jConfigLocation</param-name>
        <param-value>/WEB-INF/classes/log4j.xml</param-value>
    </context-param>
    
    <context-param>
        <param-name>log4jRefreshInterval</param-name>
        <param-value>1000</param-value>
    </context-param>
    
    <!-- UrlRewriteFilter 
    <filter>
        <filter-name>UrlRewriteFilter</filter-name>
        <filter-class>org.tuckey.web.filters.urlrewrite.UrlRewriteFilter</filter-class>
        <init-param>
            <param-name>logLevel</param-name>
            <param-value>WARN</param-value>
        </init-param>
        
        <init-param>
            <param-name>statusEnabled</param-name>
            <param-value>true</param-value>
        </init-param>
        <init-param>
            <param-name>confReloadCheckInterval</param-name>
            <param-value>1</param-value>
        </init-param>
    </filter>
    -->
    
    <!-- Spring Security -->
    <filter>
        <filter-name>springSecurityFilterChain</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>
    
    <!-- Encoding Filter -->
    <filter>
        <filter-name>encoding-filter</filter-name>
        <filter-class> org.springframework.web.filter.CharacterEncodingFilter </filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
    </filter>
    
    <!-- Hibernate Session Filter -->
    <filter>
        <filter-name>OpenSessionInViewFilter</filter-name>
        <filter-class>org.springframework.orm.hibernate3.support.OpenSessionInViewFilter</filter-class>
        <init-param>
            <param-name>sessionFactoryBeanName</param-name>
            <param-value>sessionFactory</param-value>
        </init-param>
    </filter>

    <!-- Encoding Filter Mapping -->
    <filter-mapping>
        <filter-name>encoding-filter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <!-- Spring Security Filter Mapping -->
    <filter-mapping>
        <filter-name>springSecurityFilterChain</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <!-- Hibernate Session Filter Mapping -->
    <filter-mapping>
        <filter-name>OpenSessionInViewFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <!-- UrlRewriteFilter Filter Mapping 
    <filter-mapping>
        <filter-name>UrlRewriteFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>    
    -->
    <!--
        - Configures Log4J for this web app.
        - As this context specifies a context-param "log4jConfigLocation", its file path
        - is used to load the Log4J configuration, including periodic refresh checks.
        -
        - Would fall back to default Log4J initialization (non-refreshing) if no special
        - context-params are given.
        -
        - Exports a "web app root key", i.e. a system property that specifies the root
        - directory of this web app, for usage in log file paths.
        - This web app specifies "petclinic.root" (see log4j.properties file).
    -->
    <listener>
        <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
    </listener>

    <!--
        - UserCounterListener class used to count the current number
        - of active users for the applications.  Does this by counting
        - how many user objects are stuffed into the session.  It also grabs
        - these users and exposes them in the servlet context. 
    -->
    <listener>
        <listener-class>es.workast.web.console.UserCounterListener</listener-class>
    </listener>

    <!--
      - Loads the root application context of this web app at startup,
      - by default from "/WEB-INF/applicationContext.xml".
        - Note that you need to fall back to Spring's ContextLoaderServlet for
        - J2EE servers that do not follow the Servlet 2.4 initialization order.
        -
      - Use WebApplicationContextUtils.getWebApplicationContext(servletContext)
      - to access it anywhere in the web application, outside of the framework.
      -
      - The root context is the parent of all servlet-specific contexts.
      - This means that its beans are automatically available in these child contexts,
      - both for getBean(name) calls and (external) bean references.
      -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    
    <!--
     - Map static resources to the default servlet
     - examples:
     -     http://localhost:8080/static/images/pets.png
     -     http://localhost:8080/static/styles/petclinic.css
    -->
    <!-- Weblogic: static files needs to be in the /static folder
    <servlet>
        <servlet-name>default</servlet-name>
        <servlet-class>weblogic.servlet.FileServlet</servlet-class>
        <load-on-startup>2</load-on-startup>
    </servlet>
     -->
    
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>/static/*</url-pattern>
    </servlet-mapping>
    
    <!--
      - Spring web MVC servlet that dispatches requests to registered handlers.
      - Has its own application context, by default defined in "{servlet-name}-servlet.xml",
      - i.e. "workast-servlet.xml" in this case.
      -
      - A web app can contain any number of such servlets.
      - Note that this web app has a shared root application context, serving as parent
      - of all DispatcherServlet contexts.
      -->
    <servlet>
        <servlet-name>workast</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <load-on-startup>2</load-on-startup>
    </servlet>
    
    <!--
      - Dispatcher servlet mapping for the main web user interface.
      -->
    <servlet-mapping>
        <servlet-name>workast</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
    
    <welcome-file-list>
        <welcome-file>index.htm</welcome-file>
    </welcome-file-list>
    
    <session-config>
        <session-timeout>10</session-timeout>
    </session-config>
    
	<!-- Commented out during development, it's easier to just see the app server blow up

	<error-page>
		<error-code>404</error-code>
		<location>/404.jsp</location>
	</error-page>
	<error-page>
		<exception-type>java.lang.Exception</exception-type>
        <location>/WEB-INF/jsp/uncaughtException.jsp</location>
	</error-page>
	-->
    
</web-app>